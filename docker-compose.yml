######################
## SSO server
######################
ssoweb:
  build: ./rubycas-server
  command: bundle exec rubycas-server -p 3002 -c config/config.yml
  volumes:
    - "./rubycas-server:/app"
  ports:
    - "3002:3002"
  links:
    - ssodb
  environment:
    RACK_ENV: development
    VIRTUAL_HOST: sso.docker

ssodb:
  image: postgres:9.3
  environment:
    POSTGRES_DB: casserver

######################
## Join server
######################
joinweb:
  build: ./beyondz-platform
  command: /app/docker-compose/scripts/run.bat
  volumes:
    - "./beyondz-platform:/app"
  ports:
    - "3001:3001"
  links:
    - joindb
  environment:
    RACK_ENV: development
    VIRTUAL_HOST: join.docker
  env_file: ./beyondz-platform/docker-compose/.env-docker

joindb:
  image: postgres:9.3


######################
## Canvas/Portal server
######################
canvasdb:
  image: postgres:9.3
  environment:
    POSTGRES_USER: canvas
    POSTGRES_DB: canvas

canvasredis:
  image: redis:2.6

canvasselenium:
  build: ./canvas-lms/docker-compose/seleniumff
  ports:
    - "5900:5900"

canvaskinesis:
  build: ./canvas-lms/docker-compose/kinesalite
  command: "--path /var/lib/kinesalite"
  volumes:
    - "./canvas-lms/tmp/cache:/var/lib/kinesalite"
  ports:
    - "4567:4567"
  environment:
    VIRTUAL_HOST: kinesis.docker
    VIRTUAL_PORT: 4567

canvasweb:
  build: ./canvas-lms/docker-compose
  command: /app/docker-compose/scripts/run.bat
  ports:
    - "3000:3000"
  volumes:
    - "./canvas-lms:/app"
  links:
    - canvasdb
    - canvasredis
    - canvasselenium
    - canvaskinesis
  environment:
    RACK_ENV: development
    VIRTUAL_HOST: .canvas.docker

canvasjobs:
  build: ./canvas-lms/docker-compose
  command: bundle exec script/delayed_job run
  volumes:
    - "./canvas-lms:/app"
  links:
    - canvasdb
    - canvasredis
    - canvaskinesis
  environment:
    RACK_ENV: development

# guard is turbo-slow because it relies on polling to see updates
# (because the volume is shared over NFS, so no inotify stuff.)
# This probably isn't a good solution for you if you're doing lots
# of js/css development. It may take minutes for changes to be
# reflected.
canvasguard:
  build: ./canvas-lms/docker-compose
  command: bundle exec guard -i -p
  ports:
    - "4000:4000"
  volumes:
    - "./canvas-lms:/app"
  environment:
    RACK_ENV: development


######################
## Custom CSS/JS served using lightweight static web-server
######################
cssjsweb:
  build: ./canvas-lms-js-css
  command: static --host-address 0.0.0.0 -p 3003 --gzip
  volumes:
    - "./canvas-lms-js-css:/app"
  ports:
    - "3003:3003"
  environment:
    VIRTUAL_HOST: cssjs.docker

#######################
### Braven Help
#######################
#helpweb:
#  build: ./osqa
#  command: TODO
#  volumes:
#    - "./osqa:/app"
#  ports:
#    - "3004:3004"
#  environment:
#    VIRTUAL_HOST: help.docker
#
#helpdb:
#  image: postgres:9.4.6
#  environment:
#    POSTGRES_DB: TODO

#######################
### Public facing Braven.org site
#######################
bravenweb:
  image: wordpress
  command: /var/www/html/docker-compose/scripts/run.bat
  volumes:
    - "./braven:/var/www/html"
  links:
    - bravendb
  ports:
    - "3005:3005"
  environment:
    WORDPRESS_DB_HOST: bravendb
    WORDPRESS_DB_USER: wordpress
    WORDPRESS_DB_PASSWORD: wordpress
    WORDPRESS_DB_NAME: wordpress
    VIRTUAL_HOST: braven.docker
    VIRTUAL_PORT: 3005

bravendb:
  image: mysql:5.5.44
  environment:
    MYSQL_ROOT_PASSWORD: wordpress
    MYSQL_USER: wordpress
    MYSQL_PASSWORD: wordpress
    MYSQL_DATABASE: wordpress
    #MYSQL_ALLOW_EMPTY_PASSWORD: yes

